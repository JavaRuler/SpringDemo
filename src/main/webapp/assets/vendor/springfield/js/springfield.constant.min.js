/**
 * @license
 * Copyright © 2017 ∑(O_O；).
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict';

(function() {

  /**
   * A regular expression that is used to check if a string contains full-width charactes.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;

  /**
   * A regular expression that is used to check if a string contains half-width charactes.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;

  /**
   * A regular expression that is used to check if a string contains multi-byte charactes.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var multibyte = /[^\x00-\x7F]/;

  /**
   * A regular expression that is used to check if a string contains sinograph charactes.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var sinograph = /[\u4E00-\u9FA5]/;

  /**
   * A regular expression that is used to check if a string is full of sinograph charactes.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var sinographOnly = /^[\u4E00-\u9FA5]+$/;

  /**
   * A regular expression that is used to check if a string contains surrogate-pair charactes.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;

  /**
   * A regular expression that is used to check if a string is decimal-like.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var decimal = /^(?:[+-]?[1-9]\d{0,2}(?:,?\d{3})*|0)?(?:\.\d+)?$/;

  /**
   * A regular expression that is used to check if a string is digits-like.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var digits = /^\d+$/;

  /**
   * A regular expression that is used to check if a string is float-like.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var float = /^(?:[-+])?(?:[1-9]\d*|0)?(?:\.[0-9]*)?(?:[eE][-+]?(?:[0-9]+))?$/;

  /**
   * A regular expression that is used to check if string a is integer-like.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @constant
   * @memberof Springfield
   * @type {RegExp}
   * @default
   */
  var integer = /^(?:[-+]?(?:[1-9]\d{0,2}(?:,?\d{3})*|0)|0[Bb][01]+$|0[Oo][0-7]+|0[Xx][0-9A-Fa-f]+)$/;

  /**
   * A detection method to check if the environment is fit for Springfield.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   */
  function detectEnvironment() {
    if (typeof springfield === 'undefined'
        || Object.prototype.toString.call(springfield) !== '[object Object]') {
      throw new ReferenceError('Springfield is required');
    }
  }

  /**
   * A library that delivers constants to Springfield.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @borrows fullWidth as Springfield.prototype.FULL_WIDTH_PATTERN
   * @borrows halfWidth as Springfield.prototype.HALF_WIDTH_PATTERN
   * @borrows multibyte as Springfield.prototype.MULTI_BYTE_PATTERN
   * @borrows sinograph as Springfield.prototype.SINOGRAPH_PATTERN
   * @borrows sinographOnly as Springfield.prototype.SINOGRAPH_ONLY_PATTERN
   * @borrows surrogatePair as Springfield.prototype.SURROGATE_PAIR_PATTERN
   * @borrows decimal as Springfield.prototype.DECIMAL_PATTERN
   * @borrows digits as Springfield.prototype.DIGITS_PATTERN
   * @borrows float as Springfield.prototype.FLOAT_PATTERN
   * @borrows integer as Springfield.prototype.INTEGER_PATTERN
   */
  function extendSpringfield() {
    Object.defineProperties(springfield.fn, {
      'FULL_WIDTH_PATTERN': { value: fullWidth, enumerable: true },
      'HALF_WIDTH_PATTERN': { value: halfWidth, enumerable: true },
      'MULTI_BYTE_PATTERN': { value: multibyte, enumerable: true },
      'SINOGRAPH_PATTERN': { value: sinograph, enumerable: true },
      'SINOGRAPH_ONLY_PATTERN': { value: sinographOnly, enumerable: true },
      'SURROGATE_PAIR_PATTERN': { value: surrogatePair, enumerable: true },
      'DECIMAL_PATTERN': { value: decimal, enumerable: true },
      'DIGITS_PATTERN': { value: digits, enumerable: true },
      'FLOAT_PATTERN': { value: float, enumerable: true },
      'INTEGER_PATTERN': { value: integer, enumerable: true },
    });
  }

  detectEnvironment();
  extendSpringfield();
})();
