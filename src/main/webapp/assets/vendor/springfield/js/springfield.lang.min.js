/**
 * @license
 * Copyright © 2017 ∑(O_O；).
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict';

(function() {

  /**
   * An internal method that attempts to get the "true type" of the given `value`.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {*} value The value to check.
   * @returns {String} A `string` representing the given value.
   */
  function getTag(value) {
    return Object.prototype.toString.call(value);
  }

  /**
   * A method that checks if the given value is likely an `arguments` object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isArguments`](https://github.com/lodash/lodash/blob/master/isArguments.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is likely an `arguments` object, `false` otherwise.
   * @example
   * 
   * _.isArguments(function() { return arguments }())
   * // => true
   * 
   * _.isArguments([1, 2, 3])
   * // => false
   */
  function isArguments(value) {
    return typeof value === 'object' && value !== null && getTag(value) === '[object Arguments]';
  }

  /**
   * A method that checks if the given value is classified as an `Array` object.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is an `Array` object, `false` otherwise.
   * @example
   * 
   * _.isArray([1, 2, 3])
   * // => true
   * 
   * _.isArray(document.body.children)
   * // => false
   * 
   * _.isArray('abc')
   * // => false
   */
  function isArray(value) {
    return Array.isArray(value);
  }

  /**
   * A method that checks if the given value is array-like. A value is considered array-like if
   * it's not a function and has a `value.length` that's an integer greater than or equal to `0`
   * and less than or equal to `Number.MAX_SAFE_INTEGER`.
   * 
   * **Note:** This method is derived from
   * [`lodash.isArrayLike`](https://github.com/lodash/lodash/blob/master/isArrayLike.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is array-like, `false` otherwise.
   * @example
   * 
   * _.isArrayLike([1, 2, 3])
   * // => true
   * 
   * _.isArrayLike(document.body.children)
   * // => true
   * 
   * _.isArrayLike('abc')
   * // => true
   * 
   * _.isArrayLike(Function)
   * // => false
   */
  function isArrayLike(value) {
    return value != null && typeof value !== 'function' && isArrayLikeLength(value.length);
  }

  /**
   * A method that checks if the given value is a valid array-like length.
   * 
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a valid array-like length, `false` otherwise.
   * @example
   * 
   * _.isArrayLikeLength(3)
   * // => true
   * 
   * _.isArrayLikeLength(Number.MIN_VALUE)
   * // => false
   * 
   * _.isArrayLikeLength(Infinity)
   * // => false
   * 
   * _.isArrayLikeLength('3')
   * // => false
   */
  function isArrayLikeLength(value) {
    return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= Number.MAX_SAFE_INTEGER;
  }

  /**
   * A method that checks if the given value is array-like. This method is like `isArrayLike` except that
   * it also checks if `value` is an object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isArrayLikeObject`](https://github.com/lodash/lodash/blob/master/isArrayLikeObject.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is array-like, `false` otherwise.
   * @example
   * 
   * _.isArrayLikeObject([1, 2, 3])
   * // => true
   * 
   * _.isArrayLikeObject(document.body.children)
   * // => true
   * 
   * _.isArrayLikeObject('abc')
   * // => false
   * 
   * _.isArrayLikeObject(Function)
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * A method that checks if the given value is classified as a `boolean` primitive or object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isBoolean`](https://github.com/lodash/lodash/blob/master/isBoolean.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a boolean, `false` otherwise.
   * @example
   * 
   * _.isBoolean(false)
   * // => true
   * 
   * _.isBoolean(null)
   * // => false
   */
  function isBoolean(value) {
    return value === true
        || value === false
        || (isObjectLike(value) && getTag(value) === '[object Boolean]');
  }

  /**
   * A method that checks if the given value is classified as a `Date` object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isDate`](https://github.com/lodash/lodash/blob/master/isDate.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a `Date` object, `false` otherwise.
   * @example
   * 
   * _.isDate(new Date)
   * // => true
   * 
   * _.isDate('Mon April 23 2012')
   * // => false
   */
  function isDate(value) {
    return isObjectLike(value) && getTag(value) === '[object Date]';
  }

  /**
   * A method that checks if the given value is likely a DOM element.
   * 
   * **Note:** This method is derived from
   * [`lodash.isElement`](https://github.com/lodash/lodash/blob/master/isElement.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a DOM element, `false` otherwise.
   * @example
   * 
   * _.isElement(document.body)
   * // => true
   * 
   * _.isElement('<body>')
   * // => false
   */
  function isElement(value) {
    return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
  }

  /**
   * A method that checks if the given value is an empty object, collection, map, or set.
   * 
   * Objects are considered empty if they have no own enumerable string keyed properties.
   * 
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or jQuery-like
   * collections are considered empty if they have a `length` of `0`. Similarly, maps and sets
   * are considered empty if they have a `size` of `0`.
   * 
   * **Note:** This method is derived from
   * [`lodash.isEmpty`](https://github.com/lodash/lodash/blob/master/isEmpty.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is empty, `false` otherwise.
   * @example
   * 
   * _.isEmpty(null)
   * // => true
   * 
   * _.isEmpty(true)
   * // => true
   * 
   * _.isEmpty(1)
   * // => true
   * 
   * _.isEmpty([1, 2, 3])
   * // => false
   * 
   * _.isEmpty({ 'a': 1 })
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value)
        && (Array.isArray(value)
            || typeof value === 'string'
            || typeof value.splice === 'function'
            || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag(value);
    if (tag === '[object Map]' || tag === '[object Set]') {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !Object.keys(value).length;
    }
    for (var key in value) {
      if (Object.prototype.hasOwnProperty.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A method that checks if the given value is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isError`](https://github.com/lodash/lodash/blob/master/isError.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is an Error, `false` otherwise.
   * @example
   * 
   * _.isError(new Error)
   * // => true
   * 
   * _.isError(Error)
   * // => false
   */
  function isError(value) {
    if (!isObjectLike(value)) {
      return false;
    }
    var tag = getTag(value);
    return tag === '[object Error]'
        || tag === '[object DOMException]'
        || (typeof value.message === 'string' && typeof value.name === 'string' && !isPlainObject(value));
  }

  /**
   * A method that checks if the given value is classified as a `Function` object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isFunction`](https://github.com/lodash/lodash/blob/master/isFunction.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a `Function` object, `false` otherwise.
   * @example
   * 
   * _.isFunction(encodeURI)
   * // => true
   * 
   * _.isFunction(/abc/)
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }

    // The use of `Object.toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = getTag(value);
    return tag === '[object Function]'
        || tag === '[object AsyncFunction]'
        || tag === '[object GeneratorFunction]'
        || tag === '[object Proxy]';
  }

  /**
   * A method that checks if the given value is `null` or `undefined`.
   * 
   * **Note:** This method is derived from
   * [`lodash.isNil`](https://github.com/lodash/lodash/blob/master/isNil.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is nullish, `false` otherwise.
   * @example
   * 
   * _.isNil(null)
   * // => true
   * 
   * _.isNil(void 0)
   * // => true
   * 
   * _.isNil(NaN)
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  /**
   * A method that checks if the given value is `null`.
   * 
   * **Note:** This method is derived from
   * [`lodash.isNull`](https://github.com/lodash/lodash/blob/master/isNull.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is `null`, `false` otherwise.
   * @example
   * 
   * _.isNull(null)
   * // => true
   * 
   * _.isNull(void 0)
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * A method that checks if the given value is classified as a `Number` primitive or object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isNumber`](https://github.com/lodash/lodash/blob/master/isNumber.js).
   * 
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified as numbers, use the
   * `Number.isFinite` method.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a number, `false` otherwise.
   * @example
   * 
   * _.isNumber(3)
   * // => true
   * 
   * _.isNumber(Number.MIN_VALUE)
   * // => true
   * 
   * _.isNumber(Infinity)
   * // => true
   * 
   * _.isNumber('3')
   * // => false
   */
  function isNumber(value) {
    return typeof value === 'number'
      || (isObjectLike(value) && getTag(value) === '[object Number]');
  }

  /**
   * A method that checks if the given value is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types) of `Object`.
   * (e.g. arrays, functions, objects, regexes, new Number(0), and new String(''))
   * 
   * **Note:** This method is derived from
   * [`lodash.isObject`](https://github.com/lodash/lodash/blob/master/isObject.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is an object, `false` otherwise.
   * @example
   * 
   * _.isObject({})
   * // => true
   * 
   * _.isObject([1, 2, 3])
   * // => true
   * 
   * _.isObject(Function)
   * // => true
   * 
   * _.isObject(null)
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type === 'object' || type === 'function');
  }

  /**
   * A method that checks if the given value is object-like.
   * A value is object-like if it's not `null` and has a `typeof` result of "object".
   * 
   * **Note:** This method is derived from
   * [`lodash.isObjectLike`](https://github.com/lodash/lodash/blob/master/isObjectLike.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is object-like, `false` otherwise.
   * @example
   * 
   * _.isObjectLike({})
   * // => true
   * 
   * _.isObjectLike([1, 2, 3])
   * // => true
   * 
   * _.isObjectLike(Function)
   * // => false
   * 
   * _.isObjectLike(null)
   * // => false
   */
  function isObjectLike(value) {
    return typeof value === 'object' && value !== null;
  }

  /**
   * A method that checks if the given value is a plain object, that is, an object created by
   * the `Object` constructor or one with a `[[Prototype]]` of `null`.
   * 
   * **Note:** This method is derived from
   * [`lodash.isPlainObject`](https://github.com/lodash/lodash/blob/master/isPlainObject.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a plain object, `false` otherwise.
   * @example
   * 
   * function Foo() {
   *   this.a = 1
   * }
   * 
   * _.isPlainObject(new Foo)
   * // => false
   * 
   * _.isPlainObject([1, 2, 3])
   * // => false
   * 
   * _.isPlainObject({ 'x': 0, 'y': 0 })
   * // => true
   * 
   * _.isPlainObject(Object.create(null))
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike(value) || getTag(value) !== '[object Object]') {
      return false;
    }
    var proto = Object.getPrototypeOf(value);
    if (proto === null) {
      return true;
    }
    var Ctor = Object.prototype.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor === 'function'
        && Ctor instanceof Ctor
        && Function.prototype.toString.call(Ctor) === Function.prototype.toString.call(Object);
  }

  /**
   * A method that checks if the given value is likely a prototype object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isPrototype`](https://github.com/lodash/lodash/blob/master/.internal/isPrototype.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is prototype, `false` otherwise.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor;
    var proto = (typeof Ctor === 'function' && Ctor.prototype) || Object.prototype;

    return value === proto;
  }

  /**
   * A method that checks if the given value is classified as a `RegExp` object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isRegExp`](https://github.com/lodash/lodash/blob/master/isRegExp.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a regexp, `false` otherwise.
   * @example
   * 
   * _.isRegExp(/abc/)
   * // => true
   * 
   * _.isRegExp('/abc/')
   * // => false
   */
  function isRegExp(value) {
    return isObjectLike(value) && getTag(value) === '[object RegExp]';
  }

  /**
   * A method that checks if the given value is classified as a `String` primitive or object.
   * 
   * **Note:** This method is derived from
   * [`lodash.isString`](https://github.com/lodash/lodash/blob/master/isString.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is a string, `false` otherwise.
   * @example
   * 
   * _.isString('abc')
   * // => true
   * 
   * _.isString(1)
   * // => false
   */
  function isString(value) {
    var type = typeof value;
    return type === 'string'
        || (type === 'object' && value != null && !Array.isArray(value) && getTag(value) === '[object String]');
  }

  /**
   * A method that checks if the given value is `undefined`.
   * 
   * **Note:** This method is derived from
   * [`lodash.isUndefined`](https://github.com/lodash/lodash/blob/master/isUndefined.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @param {*} value The value to check.
   * @returns {Boolean} `True` if the given value is `undefined`, `false` otherwise.
   * @example
   * 
   * _.isUndefined(void 0)
   * // => true
   * 
   * _.isUndefined(null)
   * // => false
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * A detection method that checks if the environment is fit for Springfield.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   */
  function detectEnvironment() {
    if (typeof window.springfield === 'undefined'
        || Object.prototype.toString.call(springfield) !== '[object Object]') {
      throw new ReferenceError('Springfield is required');
    }
  }

  /**
   * A library that delivers fundamental methods for Springfield.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @borrows isArguments as Springfield.prototype.isArguments
   * @borrows isArray as Springfield.prototype.isArray
   * @borrows isArrayLike as Springfield.prototype.isArrayLike
   * @borrows isArrayLikeLength as Springfield.prototype.isArrayLikeLength
   * @borrows isArrayLikeObject as Springfield.prototype.isArrayLikeObject
   * @borrows isBoolean as Springfield.prototype.isBoolean
   * @borrows isDate as Springfield.prototype.isDate
   * @borrows isElement as Springfield.prototype.isElement
   * @borrows isEmpty as Springfield.prototype.isEmpty
   * @borrows isError as Springfield.prototype.isError
   * @borrows isFunction as Springfield.prototype.isFunction
   * @borrows isNil as Springfield.prototype.isNil
   * @borrows isNull as Springfield.prototype.isNull
   * @borrows isNumber as Springfield.prototype.isNumber
   * @borrows isObject as Springfield.prototype.isObject
   * @borrows isObjectLike as Springfield.prototype.isObjectLike
   * @borrows isPlainObject as Springfield.prototype.isPlainObject
   * @borrows isPrototype as Springfield.prototype.isPrototype
   * @borrows isRegExp as Springfield.prototype.isRegExp
   * @borrows isString as Springfield.prototype.isString
   * @borrows isUndefined as Springfield.prototype.isUndefined
   */
  function extendSpringfield() {
    Object.defineProperties(springfield.fn, {
      'isArguments': { value: isArguments, configurable: true, enumerable: true, writable: true },
      'isArray': { value: isArray, configurable: true, enumerable: true, writable: true },
      'isArrayLike': { value: isArrayLike, configurable: true, enumerable: true, writable: true },
      'isArrayLikeLength': { value: isArrayLikeLength, configurable: true, enumerable: true, writable: true },
      'isArrayLikeObject': { value: isArrayLikeObject, configurable: true, enumerable: true, writable: true },
      'isBoolean': { value: isBoolean, configurable: true, enumerable: true, writable: true },
      'isDate': { value: isDate, configurable: true, enumerable: true, writable: true },
      'isElement': { value: isElement, configurable: true, enumerable: true, writable: true },
      'isEmpty': { value: isEmpty, configurable: true, enumerable: true, writable: true },
      'isError': { value: isError, configurable: true, enumerable: true, writable: true },
      'isFunction': { value: isFunction, configurable: true, enumerable: true, writable: true },
      'isNil': { value: isNil, configurable: true, enumerable: true, writable: true },
      'isNull': { value: isNull, configurable: true, enumerable: true, writable: true },
      'isNumber': { value: isNumber, configurable: true, enumerable: true, writable: true },
      'isObject': { value: isObject, configurable: true, enumerable: true, writable: true },
      'isObjectLike': { value: isObjectLike, configurable: true, enumerable: true, writable: true },
      'isPlainObject': { value: isPlainObject, configurable: true, enumerable: true, writable: true },
      'isPrototype': { value: isPrototype, configurable: true, enumerable: true, writable: true },
      'isRegExp': { value: isRegExp, configurable: true, enumerable: true, writable: true },
      'isString': { value: isString, configurable: true, enumerable: true, writable: true },
      'isUndefined': { value: isUndefined, configurable: true, enumerable: true, writable: true },
    });
  }

  detectEnvironment();
  extendSpringfield();
})();
