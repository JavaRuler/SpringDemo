/**
 * @license
 * Copyright © 2017.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict';

(function() {

  // Used to fetch csrfToken-contained head from the currunt page.
  var csrfToken = (function() {
    var header, token;
    var csrf = Object.create(null);

    // Looks up the token from the HTML <meta> elements at first.
    header = document.querySelector('meta[name="_csrf_header"]');
    token = document.querySelector('meta[name="_csrf"]');
    if (header != null
        && header.content != null
        && token != null
        && token.content != null) {
      csrf[header.content] = token.content;
      return csrf;
    }

    // If nothing found, targets the HTML <input:hidden> elements and try again.
    token = document.querySelector('input[type="hidden"][name="_csrf"]');
    if (token != null && token.value != null) {
      csrf['X-CSRF-TOKEN'] = token.value;
      return csrf;
    }

    // If there is still no harvest, returns null.
    return null;
  })();

  /**
   * An internal method that creates several format functions for Select2's default options.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} key The default message key.
   * @returns {Function} A format function.
   */
  function createFormatShorthand(key) {
    return function(args) {
      var length = arguments.length;
      var getMessage = springfield.getMessage;
      if (length === 0) {
        return getMessage(key);
      }
      if (length === 1) {
        return getMessage(key, arguments[0]);
      }
      return getMessage(key, Math.abs(arguments[0].length - arguments[1]));
    }
  }

  /**
   * A method that creates default options for jQuery Select2 plugin.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for Select2.
   * @example
   * 
   * _.SELECT2_OPTIONS
   * // => Object {formatMatches: function, formatNoMatches: function, formatInputTooShort: function, formatInputTooLong: function, formatSelectionTooBig: function…}
   */
  function getSelect2Options() {
    springfield.require('getMessage');
    return Object.create(null, {
      'formatMatches': { value: createFormatShorthand('S019'), enumerable: true, writable: true },
      'formatNoMatches': { value: createFormatShorthand('S020'), enumerable: true, writable: true },
      'formatInputTooShort': { value: createFormatShorthand('S021'), enumerable: true, writable: true },
      'formatInputTooLong': { value: createFormatShorthand('S022'), enumerable: true, writable: true },
      'formatSelectionTooBig': { value: createFormatShorthand('S023'), enumerable: true, writable: true },
      'formatLoadMore': { value: createFormatShorthand('S024'), enumerable: true, writable: true },
      'formatSearching': { value: createFormatShorthand('S025'), enumerable: true, writable: true },
    });
  }

  /**
   * A method that creates default options for jQuery DatePicker plugin.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for DatePicker.
   * @example
   * 
   * _.DATEPICKER_OPTIONS
   * => Object {format: "yyyy-mm-dd", autoclose: true, todayHighlight: true, language: "zh-CN", startDate: "1900-01-01"}
   */
  function getDatePickerOptions() {
    return Object.create(null, {
      'format': { value: 'yyyy/mm/dd', enumerable: true, writable: true },
      'autoclose': { value: true, enumerable: true, writable: true },
      'todayHighlight': { value: true, enumerable: true, writable: true },
      'language': { value: 'zh-CN', enumerable: true, writable: true },
      'startDate': { value: '1900/01/01', enumerable: true, writable: true },
    });
  }

  /**
   * A method that creates default options for jQuery TimePicker plugin.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for TimePicker.
   * @example
   * 
   * _.TIMEPICKER_OPTIONS
   * // => Object {showMeridian: false, defaultTime: false, showInputs: false}
   */
  function getTimePickerOptions() {
    return Object.create(null, {
      'showMeridian': { value: false, enumerable: true, writable: true },
      'defaultTime': { value: false, enumerable: true, writable: true },
      'showInputs': { value: false, enumerable: true, writable: true },
    });
  }

  /**
   * An internal method that places errors for jQuery Validation plugin.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @param {Element} error The error element.
   * @param {Element} element The input element.
   */
  function placeError(error, element) {
    if (element.parent().hasClass('input-group')) {
      error.appendTo(element.parent().parent());
    } else {
      error.appendTo(element.parent());
    }
  }

  /**
   * A method that creates default options for jQuery Validation Plugin.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for Validation.
   * @example
   * 
   * _.VALIDATION_OPTIONS
   * // => Object {onsubmit: false, onfocusout: false, ignore: "input[type="hidden"]", ignoreClassRules: true, ignoreAttributeRules: true…}
   */
  function getValidationOptions() {
    return Object.create(null, {
      'onsubmit': { value: false, enumerable: true, writable: true },
      'onfocusout': { value: false, enumerable: true, writable: true },
      'ignore': { value: 'input[type="hidden"]', enumerable: true, writable: true },
      'ignoreClassRules': { value: true, enumerable: true, writable: true, },
      'ignoreAttributeRules': { value: true, enumerable: true, writable: true },
      'errorPlacement': { value: placeError, configurable: true, enumerable: true, writable: true },
    });
  }

  /**
   * A method that creates default options for jQuery FileInput Plugin.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for FileInput.
   * @example
   * 
   * _.FILEINPUT_OPTIONS
   * // => Object {allowedFileExtensions: Array(9), dropZoneEnabled: false, enctype: "multipart/form-data", showClose: false, uploadAsync: false…}
   */
  function getFileInputOptions() {
    springfield.require('getMessage');

    return Object.create(null, {
      'allowedFileExtensions': {
        value: ['jpg', 'png', 'gif', 'png', 'pdf', 'doc', 'docx', 'xls', 'xlsx'],
        enumerable: true,
        writable: true,
      },
      'browseClass': {
        value: 'btn btn-success',
        enumerable: true,
        writable: true,
      },
      'removeClass': {
        value: 'btn btn-white',
        enumerable: true,
        writable: true,
      },
      'uploadClass': {
        value: 'btn btn-white',
        enumerable: true,
        writable: true,
      },
      'dropZoneEnabled': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'enctype': {
        value: 'multipart/form-data',
        enumerable: true,
        writable: true,
      },
      'showClose': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'showPreview': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'showAjaxErrorDetails': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'uploadAsync': {
        value: false,
        enumerable: true,
        writable: true,
      },
      /*'layoutTemplates': {
        value: Object.create(null, {
          'actionUpload': {
            value: '',
            enumerable: true,
            writable: true,
          },
        }),
        enumerable: true,
        writable: true,
      },*/
      'fileActionSettings': {
        value: Object.create(null, {
          'dragTitle': {
            value: springfield.getMessage('S026'),
            enumerable: true,
            writable: true,
          },
        }),
        enumerable: true,
        writable: true,
      },
      'maxFileCount': {
        value: 10,
        enumerable: true,
        writable: true,
      },
      'maxFileSize': {
        value: 20480,
        enumerable: true,
        writable: true,
      },
      'language': {
        value: 'zh',
        enumerable: true,
        writable: true,
      },
      'overwriteInitial': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'layoutTemplates': {
        value: Object.create(null, {
          'main1': {
            value: '{preview}\n' +
                   '<div class="kv-upload-progress kv-hidden"></div><div class="clearfix"></div>\n' +
                   '<div class="input-group {class}">\n' +
                   '  {caption}\n' +
                   '  <div class="input-group-btn">\n' +
                   '    {remove}\n' +
                   '    {cancel}\n' +
                   '    {upload}\n' +
                   '    {browse}\n' +
                   '  </div>\n' +
                   '</div>\n' +
                   '<label class="error"></label>',
            enumerable: true,
            writable: true,
          },
        }),
        enumerable: true,
        writable: true,
      },
    });
  }

  /**
   * A method that creates default options for jQuery DataTables Plugin.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for DataTables.
   * @example
   * 
   * _.DATATABLES_OPTIONS
   * // => Object {autoWidth: false, ordering: false, processing: true, serverSide: true, stateSave: false…}
   */
  function getDataTablesOptions() {
    springfield.require('getMessage');
    var getMessage = springfield.getMessage;

    return Object.create(Object.prototype, {
      // features
      'autoWidth': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'ordering': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'processing': {
        value: false,
        enumerable: true,
        writable: true,
      },
      'serverSide': { // related option: processing, searchDelay
        value: true,
        enumerable: true,
        writable: true,
      },
      'stateSave': { // related option: stateDuration, stateSaveParams, stateLoadParams
        value: false,
        enumerable: true,
        writable: true,
      },
      // callbacks
      'stateLoadParams': {
        value: null,
        enumerable: true,
        writable: true,
      },
      'stateSaveParams': {
        value: null,
        enumerable: true,
        writable: true,
      },
      // options
      'dom': {
        value: '<"row"<"col-md-6 col-sm-6"p><"col-md-6 col-sm-6">r>t',
        enumerable: true,
        writable: true,
      },
      'lengthMenu': {
        value: [10, 20, 50, 100],
        enumerable: true,
        writable: true,
      },
      'pageLength': {
        value: 10,
        enumerable: true,
        writable: true,
      },
      'pagingType': {
        value: 'simple_numbers',
        enumerable: true,
        writable: true,
      },
      'searchDelay': {
        value: 1000,
        enumerable: true,
        writable: true,
      },
      'searchingOnEnter': { // an alias of 'bFilterOnEnter', this is a custom option
        value: true,
        enumerable: true,
        writable: true,
      },
      'stateDuration': {
        value: -1, // -1: sessionStorage; >= 0: localStorage
        enumerable: true,
        writable: true,
      },
      // internationalisation
      'language': {
        value: Object.create(null, {
          'paginate': {
            value: Object.create(null, {
              'next': {
                value: getMessage('S001'),
                enumerable: true,
                writable: true,
              },
              'previous': {
                value: getMessage('S002'),
                enumerable: true,
                writable: true,
              },
            }),
            enumerable: true,
            writable: true,
          },
          'emptyTable': {
            value: getMessage('S003'),
            enumerable: true,
            writable: true,
          },
          'info': {
            value: getMessage('S004'),
            enumerable: true,
            writable: true,
          },
          'infoEmpty': {
            value: getMessage('S005'),
            enumerable: true,
            writable: true,
          },
          'infoFiltered': {
            value: getMessage('S006'),
            enumerable: true,
            writable: true,
          },
          'lengthMenu': {
            value: getMessage('S007'),
            enumerable: true,
            writable: true,
          },
          'loadingRecords': {
            value: getMessage('S008'),
            enumerable: true,
            writable: true,
          },
          'processing': {
            value: '',
            enumerable: true,
            writable: true,
          },
          'search': {
            value: '',
            enumerable: true,
            writable: true,
          },
          'searchPlaceholder': {
            value: getMessage('S009'),
            enumerable: true,
            writable: true,
          },
          'zeroRecords': {
            value: getMessage('S010'),
            enumerable: true,
            writable: true,
          },
        }),
        enumerable: true,
        writable: true,
      },
      // responsive
      responsive: {
        value: true,
        enumerable: true,
        writable: true,
      },
    });
  }

  /**
   * A method that creates default options for jQuery SlimScroll Plugin.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for SlimScroll.
   * @example
   * 
   * _.SLIMSCROLL_OPTIONS
   * // => Object {alwaysVisible: false}
   */
  function getSlimScrollOptions() {
    return Object.create(null, {
      'alwaysVisible': { value: false, enumerable: true, writable: true },
    });
  }

  /**
   * An internal method that creates several toggle functions for Select2's default options.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} css1 The first css to use.
   * @param {String} css2 The second css to use.
   * @returns {Function} A toggle function.
   */
  function createToggelShorthand(css1, css2) {
    return function() {
      this.classList.remove(css1);
      this.classList.add(css2);
    };
  }

  /**
   * A method that creates default options for jQuery-UI's `autocomplete` method.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof Springfield
   * @returns {Object} The default options for `autocomplete` method.
   * @example
   * 
   * _.AUTOCOMPLETE_OPTIONS
   * // => Object {autoFocus: false, delay: 500, disabled: false, minLength: 2, my: "center bottom"…}
   */
  function getAutocompleteOptions() {
    return Object.create(Object.prototype, { // Use `Object.create(Object.prototype)` instead of `Object.create(null)` since jQuery-UI calls `options.hasOwnProperty` to check the options.
      'autoFocus': { value: false, enumerable: true, writable: true },
      'delay': { value: 500, enumerable: true, writable: true },
      'disabled': { value: false, enumerable: true, writable: true },
      'minLength': { value: 2, enumerable: true, writable: true },
      'my': { value: 'center bottom', enumerable: true, writable: true },
      'at': { value: 'center top', enumerable: true, writable: true },
      'open': { value: createToggelShorthand('ui-corner-all', 'ui-corner-top'), enumerable: true, writable: true },
      'close': { value: createToggelShorthand('ui-corner-top', 'ui-corner-all'), enumerable: true, writable: true },
    });
  }

  /**
   * An internal method that creates several shorthand functions for showing message.
   *  
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} level The message level (success | info | warning | error)
   * @param {String} defaultKey The default message key.
   * @returns {Function} A shorthand function for showing message.
   */
  function createShowShorthand(level, defaultKey) {
    return function(key) {
      springfield.require('getMessage');

      var getMessage = springfield.getMessage;
      var message = getMessage.apply(null, arguments);

      if (message == null) {
        if (!defaultKey) {
          return;
        }
        message = getMessage(defaultKey);
      }

      window.toastr != null ? window.toastr[level](message) : window.alert(message);
    };
  }

  /**
   * A method that displays an alert dialog with the specified options.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @memberof jQuery
   * @instance
   * @param {*} [options] Options for displaying dialogs.
   * @param {Function} [callback] A function attached to the buttons on the dialog.
   * @example
   * 
   * $.alert()
   * // => display a warning dialog
   * 
   * $.alert({ type: 'error' })
   * // => display an error dialog
   */
  function alert(options, callback) {
    var method;

    if (callback == null) {
      if (typeof options === 'function') {
        method = options;
        options = null;
      }
    } else {
      if (typeof callback !== 'function') {
        return;
      }
      method = callback;
    }

    springfield.require('getMessage');
    var getMessage = springfield.getMessage;
    var defaults = Object.create(null, {
      'title': { value: getMessage('S015'), enumerable: true, writable: true },
      'text': { value: getMessage('S016'), enumerable: true, writable: true },
      'type': { value: 'warning', enumerable: true, writable: true },
      'showCancelButton': { value: true, enumerable: true, writable: true },
      'confirmButtonColor': { value: '#fff', enumerable: true, writable: true },
      'confirmButtonText': { value: getMessage('S017'), enumerable: true, writable: true },
      'cancelButtonText': { value: getMessage('S018'), enumerable: true, writable: true },
    });

    Object.assign(defaults, options);

    if (window.swal == null) {
      var result = confirm(defaults.text);
      if (result && method != null) {
        method.call();
      }
    } else {
      swal(defaults, method);
    }
  }

  /**
   * An internal method that handles global events.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function handleGlobalEvent() {
    if (!jQuery.blockUI || !jQuery.unblockUI) {
      return;
    }

    var message = '<div class="sk-spinner sk-spinner-wave">'
        + '<div class="sk-rect1" style="margin-right: 3px"></div>'
        + '<div class="sk-rect2" style="margin-right: 3px"></div>'
        + '<div class="sk-rect3" style="margin-right: 3px"></div>'
        + '<div class="sk-rect4" style="margin-right: 3px"></div>'
        + '<div class="sk-rect5" style="margin-right: 3px"></div>'
        + '</div>';
    var css = Object.create(null, {
        'backgroundColor': { value: 'transparent', enumerable: true, writable: true, },
        'border': { value: '0', enumerable: true, writable: true, }
    });

    jQuery.blockUI.defaults.message = message;
    jQuery.blockUI.defaults.css = jQuery.extend(jQuery.blockUI.defaults.css, css);
    jQuery.blockUI.defaults.baseZ = 100000;
    jQuery(document).bind('ajaxStart', function() {
      jQuery.blockUI();
    }).bind('ajaxStop', function() {
      jQuery.unblockUI();
    });
  }

  /**
   * An internal method that handles the side bar.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function handleSideBar() {
    var $sideBar = jQuery('.sidebar-collapse .nav.metismenu');
    var $breadcrumb = jQuery('.breadcrumb li');

    if ($sideBar.lenght < 1 || $breadcrumb.length < 1) {
      return;
    }

    var $navigator;
    var navContent;
    var selector;
    var found = false;
    for (var index = 0; index < ($breadcrumb.length > 2 ? 2 : $breadcrumb.length); index++) {
      $navigator = jQuery($breadcrumb[index]);
      navContent = jQuery.trim($navigator.find('a').length > 0 ? $navigator.find('a').text() : $navigator.text());
      if (index === 0) {
        selector = 'a';
      } else {
        selector = '.active a';
      }
      $sideBar.find(selector).each(function(index, value) {
        if (jQuery.trim(jQuery(value).text()) === navContent) {
          found = true;
          jQuery(value).parent().addClass('active');
          if (index === 0) {
            jQuery(value).next().addClass('in');
          }
        }
      });
      if (!found) {
        break;
      }
    }
  }

  /**
   * A method that handles the message bar.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function handleMessageBar() {
    if (window.toastr == null) {
      return;
    }

    window.toastr.options = Object.create(null, {
      'closeButton': { value: true, enumerable: true, writable: true },
      'debug': { value: false, enumerable: true, writable: true },
      'progressBar': { value: true, enumerable: true, writable: true },
      'positionClass': { value: 'toast-top-right', enumerable: true, writable: true },
      'onclick': { value: null, enumerable: true, writable: true },
      'showDuration': { value: '400', enumerable: true, writable: true },
      'hideDuration': { value: '1000', enumerable: true, writable: true },
      'timeOut': { value: '3000', enumerable: true, writable: true },
      'extendedTimeOut': { value: '1000', enumerable: true, writable: true },
      'showEasing': { value: 'swing', enumerable: true, writable: true },
      'hideEasing': { value: 'linear', enumerable: true, writable: true },
      'showMethod': { value: 'fadeIn', enumerable: true, writable: true },
      'hideMethod': { value: 'fadeOut', enumerable: true, writable: true },
    });
  }

  /**
   * A method that handles the collapsible controllers (e.g. panel).
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function handleCollapsibleController() {
    jQuery('.control-collapse-link').click(function() {
      var $button = jQuery(this).parent('span');
      var $target = $button.prev('textarea');
      var $mark = jQuery(this).find('i');
      $target.slideToggle(200);
      $mark.toggleClass('fa-chevron-up').toggleClass('fa-chevron-down');
      $button.toggleClass('').toggleClass('input-group-addon-left');
    });
  }

  /**
   * A method that handles all reset buttons.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function handleResetButton() {
    jQuery('.btn-reset').click(function() {
      var forms = jQuery(this).closest('form');
      if (forms.length > 0) {
        forms[0].reset();
      }
    });
  }

  /**
   * A method that disables all submit buttons.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function handleDisabledSubmit() {
    jQuery('form').submit(function() {
      return false;
    });
  }

  /**
   * A method that handles all ajax error.
   * 
   * @author HuJun Fan, ∑(O_O；)
   * @since 1.0.0
   * @method
   */
  function handleAjaxError() {
    jQuery(document).ajaxError(function(event, request, settings, errorThrown) {
      var status = request.status;

      // Go to the login page if the status code is '403', which means forbidden.
      if (status === 403) {
        springfield.route(springfield.CONTEXT_PATH + '/login');
        return;
      }

      // Show the error message sended from server if the status code is '500'.
      if (status === 500 || status === 422) {
        if (request.responseJSON) {
          var reason = request.responseJSON.reason;
          if (reason) {
            window.toastr != null ? window.toastr.error(reason) : window.alert(reason);
            return;
          }
        }
      }

      // Show defautl message when catching any client error.
      if (status === 200) {
        $.alarm('S014');
      }

      // Otherwise, show error messages according to the status code.
      $.alarm(status)
    });
  }

  /**
   * A data filter that avoids issues with the empty response in jQuery's ajax operation, which throws
   * a parse error.
   * 
   * @param {String} data The raw data returned from the server.
   * @param {String} type The `'dataType'` parameter.
   */
  function filterAjaxData(data, type) {
    // As of jQuery 1.9, an empty response is rejected and a parse error is thrown.
    // That is to say, only a well-formed JSON, `'{}'` and null can be accepted by jQuery.
    if (type === 'json' && data === '') {
      return '{}';
    }
    return data;
  }

  /**
   * A method that handles the ajax global settings.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function handleAjaxSetup() {
    jQuery.ajaxSetup(Object.create(null, {
      // Don't worry about the GET request, this option will be ignored by jQuery when using HTTP GET method.
      'contentType': { value: 'application/json; charset=UTF-8', enumerable: true, writable: true },
      'headers': { value: csrfToken, enumerable: true, writable: true },
      'dataType': { value: 'json', enumerable: true, writable: true },
      'dataFilter': { value: filterAjaxData, enumerable: true, writable: true },
    }));
  }

  /**
   * A method that handles the initialization of the current page.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   */
  function initializePage() {
    handleGlobalEvent();
    handleSideBar();
    handleMessageBar();
    handleCollapsibleController();
    handleResetButton();
    handleDisabledSubmit();
    handleAjaxError();
    handleAjaxSetup();
  }

  /**
   * A detection method to check if the environment is fit for Springfield.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   */
  function detectEnvironment() {
    if (typeof springfield === 'undefined'
        || Object.prototype.toString.call(springfield) !== '[object Object]') {
      throw new ReferenceError('Springfield is required');
    }
    if (typeof jQuery === 'undefined'
        || Object.prototype.toString.call(jQuery) !== '[object Function]') {
      throw new ReferenceError('Jquery is required');
    }
  }

  /**
   * A library that provides fundamental methods for Inspinia UI.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @borrows getSelect2Options as Springfield.prototype.SELECT2_OPTIONS
   * @borrows getDatePickerOptions as Springfield.prototype.DATEPICKER_OPTIONS
   * @borrows getTimePickerOptions as Springfield.prototype.TIMEPICKER_OPTIONS
   * @borrows getValidationOptions as Springfield.prototype.VALIDATION_OPTIONS
   * @borrows getFileInputOptions as Springfield.prototype.FILEINPUT_OPTIONS
   * @borrows getDataTablesOptions as Springfield.prototype.DATATABLES_OPTIONS
   * @borrows getSlimScrollOptions as Springfield.prototype.SLIMSCROLL_OPTIONS
   * @borrows getAutocompleteOptions as Springfield.prototype.AUTOCOMPLETE_OPTIONS
   */
  function extendSpringfield() {
    Object.defineProperties(springfield.fn, {
      'SELECT2_OPTIONS': { get: getSelect2Options, enumerable: true },
      'DATEPICKER_OPTIONS': { get: getDatePickerOptions, enumerable: true },
      'TIMEPICKER_OPTIONS': { get: getTimePickerOptions, enumerable: true },
      'VALIDATION_OPTIONS': { get: getValidationOptions, enumerable: true },
      'FILEINPUT_OPTIONS': { get: getFileInputOptions, enumerable: true },
      'DATATABLES_OPTIONS': { get: getDataTablesOptions, enumerable: true },
      'SLIMSCROLL_OPTIONS': { get: getSlimScrollOptions, enumerable: true },
      'AUTOCOMPLETE_OPTIONS': { get: getAutocompleteOptions, enumerable: true },
    });
  }

  /**
   * A library that enhances jQeury with several usage methods.
   * 
   * @author HuJun Fan
   * @since 1.0.0
   * @method
   * @borrows alert as jQuery.alert
   * @borrows createShowShorthand as jQuery.confirm
   * @borrows createShowShorthand as jQuery.notice
   * @borrows createShowShorthand as jQuery.warn
   * @borrows createShowShorthand as jQuery.alarm
   */
  function extendJQuery() {
    jQuery.extend(Object.create(null, {
      'alert': { value: alert, configurable: true, enumerable: true, writable: true },
      'confirm': { value: createShowShorthand('success', 'S011'), configurable: true, enumerable: true, writable: true, },
      'notice': { value: createShowShorthand('info'), configurable: true, enumerable: true, writable: true, },
      'warn': { value: createShowShorthand('warning', 'S012'), configurable: true, enumerable: true, writable: true, },
      'alarm': { value: createShowShorthand('error', 'S013'), configurable: true, enumerable: true, writable: true, },
    }));
  }

  detectEnvironment();
  extendSpringfield();
  extendJQuery();
  initializePage();
})();
