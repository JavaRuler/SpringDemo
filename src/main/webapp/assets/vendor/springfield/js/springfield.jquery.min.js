/**
 * @license
 * Copyright © 2017 ∑(O_O；).
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict';

(function() {

  // Used to check if the given value is falsy.
  var falsyValues = ['false', 'null', 'undefined', '0', ''];

  // Used to check if the given value is nullish.
  var nullishValues = ['null', 'undefined'];
  
  // A default options for `serializeObject` and `serializeJSON` methods.
  var defaultSerializeOptions = Object.create(null, {
    // a flag that indicates if the field should be filtered
    'allowFilters': { value: false, enumerable: true, writable: true },
    // note that this option is only available when 'allowFilters' is turned to true.
    'filters': { // add or replace filters to satisfy your own purpose
      value: Object.create(null, {
        'number': { value: toNumber, enumerable: true, writable: true }, // filters can recieve field.value, field.name ,options.data three arguments
        'boolean': { value: toBoolean, enumerable: true, writable: true },
        'null': { value: toNull, enumerable: true, writable: true },
        'exclusion': { value: undefined, enumerable: true, writable: true }, // a special filter that makes it easy to exclude fields
      }),
      enumerable: true,
      writable: true,
    },
    // a mapping between fields and filters (e.g. { 'userAge': 'number' })
    'fields': { value: Object.create(null), enumerable: true, writable: true },
    // additional data for filters to use
    'data': { value: null, enumerable: true, writable: true },
  });

  // Used to check the type of input-elements.
  var inputTypesPattern =  /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list

  // A default options for `clearFields` and `clearForm` methods.
  var defaultClearOptions = Object.create(null, {
    'includeHidden': { value: false, enumerable: true, writable: true },
    'beforeClearing': { value: null, enumerable: true, writable: true },
    'afterClearing': { value: null, enumerable: true, writable: true },
  });

  /**
   * An internal method that converts the given value to number.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} value The value to convert.
   * @returns {Number} A number converted from the given value.
   *                   If the first character cannot be converted to a number, NaN is returned.
   */
  function toNumber(value) {
    return Number(value);
  }

  /**
   * An internal method that converts the given value to boolean.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} value The value to convert.
   * @returns {Boolean} `True` if the given value is not a falsy string, 'false' otherwise.
   */
  function toBoolean(value) {
    return !falsyValues.includes(value.toLowerCase());
  }

  /**
   * An internal method that converts the given value to null.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} value The value to convert.
   * @returns {Null|String} `Null` if the given value is a nullish string, else the value itself.
   */
  function toNull(value) {
    if (nullishValues.includes(value.toLowerCase())) {
      return null;
    }
    return value;
  }

  /**
   * An internal method that gets the data of the field, which is specified by the name.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {JQuery} $form The form to serialize.
   * @param {String} name The field name.
   * @returns {Object} The data of the field.
   */
  function getFieldData($form, name) {
    var escapedName = name.replace(/(:|\.|\[|\]|\s)/g, '\\$1'); // every non-standard character need to be escaped by "\\"
    var selector = '[name="' + escapedName + '"]';
    var input;
    for (var index = 0; index < $form.length; index++) {
      // NOTE: This only returns the first field if multiple are matched with the same name (i.e. a checkbox group).
      // So, arrays with different filters specified through the data-serialize-filter attribute is unsupported.
      input = $form[index].querySelector(selector);
      if (input != null) {
        break;
      }
    }
    return input.dataset;
  }

  /**
   * An internal method that check if the given filter name is valid.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} filterName The filter name.
   * @param {*} [options] Options for serializing.
   * @returns {Boolean} `True` if the given filter is valid, `false` otherwise.
   */
  function validateFilterName(filterName, options) {
    var validFilterNames = Object.keys(options.filters);
    if (!validFilterNames.includes(filterName) && filterName !== 'string') {
      throw new Error('Unsupported filter: "' + filterName + '"');
    }
  }

  /**
   * An internal method that gets the filter of the field, which is specified by the name.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} name The field name.
   * @param {Object} fieldData The data of the field.
   * @param {*} [options] Options for serializing.
   * @returns {String} The filter name.
   */
  function getFilterName(name, fieldData, options) {

    // Look up from the field's data first.
    var filterName = fieldData['serializeFilter']; // data-serialize-filter

    // Then try to find the field's name out with `options.fields`.
    if (filterName == null) {
      filterName = options.fields[name];
    }

    // If all attempts failed, set filter to 'string' as default value
    if (filterName == null) {
      return 'string';
    }

    filterName = filterName.toLowerCase();
    validateFilterName(filterName, options); // make sure that the specified filter is available
    return filterName;
  }

  /**
   * An internal method that filters the value of the field, which is specified by the name.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} name The field name.
   * @param {*} value The value of the field.
   * @param {Object} fieldData The data of the field.
   * @param {*} [options] Options for serializing.
   * @returns {*} The filtered value.
   */
  function filterField(name, value, fieldData, options) {
    var filterName = getFilterName(name, fieldData, options);

    if (filterName === 'string' && !Object.keys(options.filters).includes('string')) {
      return value;
    }

    var filter = options.filters[filterName];
    if (typeof filter === 'function') {
      return filter.call(null, value, name);
    }
    return filter;
  }

  /**
   * An internal method that sets a value into the given object's property.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {Object} object The object to set property.
   * @param {String} name The property name.
   * @param {*} value The value to set.
   */
  function setEntry(object, name, value) {
    var property = object[name];
    if (property !== undefined) {
      if (!Array.isArray(property)) {
        object[name] = Array.of(property);
      }
      object[name].push(value);
      return;
    }
    object[name] = value;
  }

  /**
   * A method that serializes a form into a JavaScript Object.
   * 
   * **Note:** Conversion of nested object is unsupported. If you have some needs like that,
   * try [jquery.serializeJSON](https://github.com/marioizquierdo/jquery.serializeJSON)
   * or [jquery-serialize-object](https://github.com/macek/jquery-serialize-object).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof jQuery
   * @param {*} [options] Options for serializing.
   * @returns {Object} The serialized object.
   * @example
   * 
   * <form>
   *   <!-- simple field -->
   *   <input type="text" name="db" value="tomcat" />
   * 
   *   <!-- array -->
   *   <input type="text" name="language" value="js" />
   *   <input type="text" name="language" value="java" />
   * 
   *   <!-- select -->
   *   <select name="ide">
   *     <option value="ws">Web Storm</option>
   *     <option value="vs" selected>VS Code</option>
   *     <option value="sl">Sublime</option>
   *   </select>
   * 
   *   <!-- select multiple options -->
   *   <select name="files" multiple>
   *     <option value="md" selected>Markdown</option>
   *     <option value="sql" selected>SQL</option>
   *     <option value="xml">XML</option>
   *   </select>
   * </form>
   * 
   * $('form').serializeObject()
   * // => { db: 'tomcat', language: ['js', 'java'], ide: 'vs', files: ['md', 'sql'] }
   */
  function serializeObject(options) {

    // merge options
    options = Object.assign(Object.create(null), defaultSerializeOptions, options);

    // Note that the set of matched elements is most likely a form, but it could also be a group of inputs.
    // Also note that `this` here is a jQuery object.
    var $form = this;

    // Use native `jQuery.fn.serializeArray` function to get an array of { name, value } objects.
    var serializeArray = $form.serializeArray();

    // Convert the serializeArray into a serialized object with keys.
    var object = Object.create(null);
    serializeArray.forEach(function(item) {
      var name = item.name;
      var value = item.value;

      if (options.allowFilters) {
        var fieldData = getFieldData($form, name);
        value = filterField(name, value, fieldData, options);

        if (value === undefined) { // ignored if the returned value is undefined
          return;
        }
      }

      setEntry(object, name, value);
    });

    return object;
  }

  /**
   * This method is like `serializeObject` except that it returns a JSON string instead of a object.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof jQuery
   * @param {*} [options] Options for serializing.
   * @returns {String} The serialized JSON string.
   * @example
   * 
   * <form>
   *   <!-- simple field -->
   *   <input type="text" name="db" value="tomcat" />
   * 
   *   <!-- array -->
   *   <input type="text" name="language" value="js" />
   *   <input type="text" name="language" value="java" />
   * 
   *   <!-- select -->
   *   <select name="ide">
   *     <option value="ws">Web Storm</option>
   *     <option value="vs" selected>VS Code</option>
   *     <option value="sl">Sublime</option>
   *   </select>
   * 
   *   <!-- select multiple options -->
   *   <select name="files" multiple>
   *     <option value="md" selected>Markdown</option>
   *     <option value="sql" selected>SQL</option>
   *     <option value="xml">XML</option>
   *   </select>
   * </form>
   * 
   * $('form').serializeJSON()
   * // => "{"db":"tomcat","language":["js","java"],"ide":"vs","files":["md","sql"]}"
   */
  function serializeJSON(options) {

    // Note that `this` here is a jQuery object.
    var object = serializeObject.call(this, options);
    return JSON.stringify(object);
  }

  /**
   * A method that clears the selected form fields, except the file input in IE.
   * 
   * **Note:** This method is derived from
   * [`$.fn.clearFields`](https://github.com/jquery-form/form/blob/master/src/jquery.form.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof jQuery
   * @param {*} [options] Options for clearing.
   * @returns {Object} The selected fields wrapped by jQuery.
   * @example
   * 
   * <form>
   *   <input type="text" name="db" value="tomcat" />
   * </form>
   * 
   * $('input').clearFields()
   * // => [input, prevObject: r.fn.init(1)]
   */
  function clearFields(options) {

    // merge options
    options = Object.assign(Object.create(null), defaultSerializeOptions, options);

    // Note that `this` here is a jQuery object.
    var $fields = this;

    // Do something before clearing fields, if needed.
    var beforeClearing = options.beforeClearing;
    if (typeof beforeClearing === 'function') { // make sure that `options.beforeClearing` is a function
      beforeClearing.call($fields);
    }

    var fields = Array.apply(null, $fields);
    fields.forEach(function(field) {

      // Only available when `field` is a HTMLInputElement.
      var type = field.type;

      // Use `node.nodeName` to get the name of the tag.
      // Also see the links shown below for more details:
      // https://stackoverflow.com/questions/2751556/what-is-the-best-way-to-get-an-elements-tag-name-in-js
      // http://aleembawany.com/2009/02/11/tagname-vs-nodename/
      var tag = field.nodeName.toLowerCase(); // candidates: `node.nodeName`, `element.tagName`, `element.localName`

      if (inputTypesPattern.test(type) || tag === 'textarea') {
        field.value = '';
      } else if (type === 'checkbox' || type === 'radio') {
        field.checked = false;
      } else if (tag === 'select') {
        field.selectedIndex = -1;
      } else if (type === 'file') {
        // Note: this method has no effect on file input in IE since it is `readonly` after selecting
        // the file in >= IE8, for security reasons.
        // Also ee the links shown below for more details:
        // https://stackoverflow.com/questions/9617738/how-to-clear-file-input
        // https://stackoverflow.com/questions/1043957/clearing-input-type-file-using-jquery/1188853#1188853
        if (!/MSIE/.test(navigator.userAgent)) {
          field.value = '';
        }
      } else if (options.includeHidden) {
        if ((options.includeHidden === true && /hidden/.test(type))
            || (field.nodeType === 1 && field.matches(String(options.includeHidden)))) {
          field.value = '';
        }
      }
    });

    // Similar to the process before clearing.
    var afterClearing = options.afterClearing;
    if (typeof afterClearing === 'function') {
      afterClearing.call($fields);
    }

    return $fields;
  }

  /**
   * A method that clears the selected form. It takes the following actions on the form's input fields:
   * - input text fields will have their `value` property set to the empty string
   * - select elements will have their `selectedIndex` property set to `-1`
   * - checkbox and radio inputs will have their `checked` property set to false
   * - inputs of type submit, button, reset, and hidden will *not* be effected
   * - inputs of type file in IE will *not* be effected
   * - button elements will *not* be effected
   * 
   * **Note:** This method is derived from
   * [`$.fn.clearForm`](https://github.com/jquery-form/form/blob/master/src/jquery.form.js).
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @memberof jQuery
   * @param {*} [options] Options for clearing.
   * @returns {Object} The selected forms wrapped by jQuery.
   * @example
   * 
   * <form>
   *   <input type="text" name="db" value="tomcat" />
   * </form>
   * 
   * $('form').clearForm()
   * // => [form, prevObject: r.fn.init(1)]
   */
  function clearForm(options) {

    // Note that `this` here is a jQuery object.
    var forms = Array.apply(null, this);
    forms.forEach(function(form) {
      clearFields.call(jQuery('input,select,textarea', form), options); // use `jQuery` instead of `$` to avoid conflict issues
    });
    return this;
  }

  /**
   * An internal method that creates an shorthand Ajax function, which is equivalent to:
   * `$.ajax({ type: 'PUT', url: url, data: data, success: success, dataType: dataType });`
   * or
   * `$.ajax({ type: 'DELETE', url: url, data: data, success: success, dataType: dataType });`.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @param {String} method `'PUT'` or `'DELETE'`.
   * @returns {Function} A shorthand Ajax function.
   */
  function createAjaxShorthand(method) {
    return function(url, data, callback, type) {
      // Shift arguments if data argument was omitted
		  if ( jQuery.isFunction(data) ) { // use jQuery's API to ensure that behaviors of `put` and `delete` are same as `$.get` and `$.post`
			  type = type || callback;
			  callback = data;
			  data = undefined;
		  }

		  // The url can be an options object (which then must have .url)
		  return jQuery.ajax(jQuery.extend({
			  url: url,
			  type: method,
			  dataType: type,
			  data: data,
			  success: callback
		  }, jQuery.isPlainObject(url) && url));
    };
  }

  /**
   * A detection method to check if the environment is fit for jQueryg.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   */
  function detectEnvironment() {
    if (typeof jQuery === 'undefined'
        || Object.prototype.toString.call(jQuery) !== '[object Function]') {
      throw new ReferenceError('JQuery is required');
    }
  }

  /**
   * A library that enhances jQeury with several usage methods.
   * 
   * @author ∑(O_O；)
   * @since 1.0.0
   * @method
   * @borrows serializeObject as jQuery.prototype.serializeObject
   * @borrows serializeJSON as jQuery.prototype.serializeJSON
   * @borrows clearFields as jQuery.prototype.clearFields
   * @borrows clearForm as jQuery.prototype.clearForm
   * @borrows createAjaxShorthand as jQuery.put
   * @borrows createAjaxShorthand as jQuery.delete
   */
  function extendJQuery() {
    jQuery.fn.extend(Object.create(null, {
      'serializeObject': { value: serializeObject, configurable: true, enumerable: true, writable: true },
      'serializeJSON': { value: serializeJSON, configurable: true, enumerable: true, writable: true },
      'clearFields': { value: clearFields, configurable: true, enumerable: true, writable: true },
      'clearForm': { value: clearForm, configurable: true, enumerable: true, writable: true },
    }));
    jQuery.extend(Object.create(null, {
      'put': { value: createAjaxShorthand('put'), configurable: true, enumerable: true, writable: true },
      'del': { value: createAjaxShorthand('delete'), configurable: true, enumerable: true, writable: true },
    }));
  }

  detectEnvironment();
  extendJQuery();
})();
